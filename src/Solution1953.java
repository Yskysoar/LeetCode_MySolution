/**
 * @author Yskysoar
 * @createTime 2024-05-16 8:41
 * @description 1953. 你可以工作的最大周数
 * 给你 n 个项目，编号从 0 到 n - 1 。同时给你一个整数数组 milestones ，其中每个 milestones[i] 表示第 i 个项目中的阶段任务数量。
 * 你可以按下面两个规则参与项目中的工作：
 * 每周，你将会完成 某一个 项目中的 恰好一个 阶段任务。你每周都 必须 工作。
 * 在 连续的 两周中，你 不能 参与并完成同一个项目中的两个阶段任务。
 * 一旦所有项目中的全部阶段任务都完成，或者仅剩余一个阶段任务都会导致你违反上面的规则，那么你将 停止工作 。注意，由于这些条件的限制，你可能无法完成所有阶段任务。
 * 返回在不违反上面规则的情况下你 最多 能工作多少周。
 * 示例 1：
 * 输入：milestones = [1,2,3]
 * 输出：6
 * 解释：一种可能的情形是：
 * ​​​​- 第 1 周，你参与并完成项目 0 中的一个阶段任务。
 * - 第 2 周，你参与并完成项目 2 中的一个阶段任务。
 * - 第 3 周，你参与并完成项目 1 中的一个阶段任务。
 * - 第 4 周，你参与并完成项目 2 中的一个阶段任务。
 * - 第 5 周，你参与并完成项目 1 中的一个阶段任务。
 * - 第 6 周，你参与并完成项目 2 中的一个阶段任务。
 * 总周数是 6 。
 * 示例 2：
 * 输入：milestones = [5,2,1]
 * 输出：7
 * 解释：一种可能的情形是：
 * - 第 1 周，你参与并完成项目 0 中的一个阶段任务。
 * - 第 2 周，你参与并完成项目 1 中的一个阶段任务。
 * - 第 3 周，你参与并完成项目 0 中的一个阶段任务。
 * - 第 4 周，你参与并完成项目 1 中的一个阶段任务。
 * - 第 5 周，你参与并完成项目 0 中的一个阶段任务。
 * - 第 6 周，你参与并完成项目 2 中的一个阶段任务。
 * - 第 7 周，你参与并完成项目 0 中的一个阶段任务。
 * 总周数是 7 。
 * 注意，你不能在第 8 周参与完成项目 0 中的最后一个阶段任务，因为这会违反规则。
 * 因此，项目 0 中会有一个阶段任务维持未完成状态。
 * 提示：
 * n == milestones.length
 * 1 <= n <= 10^5
 * 1 <= milestones[i] <= 10^9
 */
public class Solution1953 {
    public static void main(String[] args) {

    }
/*
    变相理解一下题意：
    面前有两个鼓，你必须交替敲，不能连续敲同一个鼓；
    假设鼓A至多可以敲5下，鼓B可以至多敲1下，鼓C可以至多敲3下；
    那么：
    A一下，B一下（B滚蛋，C上场）；
    A一下，C一下，A一下，C一下，A一下，C一下（C滚蛋）；
    还没完，A可以再一下；
    总共9下；
    所以上限就在于，能至多敲的那个鼓的次数；
    如果单独一只鼓的次数，超过其他所有鼓的次数之和（其他鼓都不够打的），那么总次数就是其他鼓的次数之和*2+1；
    如果平了，就恰好是所有鼓的次数之和；
    如果单独某只鼓不够打其他所有鼓，那就多只鼓打剩下所有鼓（假设剩下所有鼓不够打的）
    那无论几只鼓还剩下几下没打，总可以平均分给这几只鼓，总可以将剩下次数全部打完
    也就是说，总次数最终总是所有鼓的次数之和
*/

    /**
     * 数学模拟
     * @param milestones 阶段数
     * @return 可以工作的最长周期
     */
    public long numberOfWeeks(int[] milestones) {
        long ans = 0;
        long max = Integer.MIN_VALUE;
        for (int i : milestones) {
            ans += i;
            max = Math.max(max, i);
        }
        if (ans >= max * 2) {
            return ans;
        } else {
            return (ans - max) * 2L + 1;
        }
    }
}
